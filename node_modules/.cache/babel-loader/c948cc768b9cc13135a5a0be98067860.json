{"ast":null,"code":"import axios from 'axios';\nconst token = window.localStorage.getItem('token');\nconst url_local = 'http://localhost:8000/api/';\nconst url_remote = 'https://www.test.pressstart.co/dev/whitelabel/api/';\nconst url_default = url_local;\nexport const traerTodos = () => async dispacth => {\n  const instance = axios.create({\n    baseURL: url_default + 'users',\n    timeout: 1000,\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  const respuesta = await instance.get(url_default + 'users');\n  dispacth({\n    type: 'traer_usuarios',\n    payload: respuesta.data.users\n  });\n};\nexport const crearUsuario = (data, usuarios) => async dispacth => {\n  const instance = axios.create({\n    baseURL: url_default + 'create',\n    timeout: 1000,\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  const respuesta = await instance.post(url_default + 'create', data);\n  usuarios.push(respuesta.data.user);\n  dispacth({\n    type: 'crear_usuario',\n    payload: usuarios\n  });\n};\nexport const editarUsuario = data => async dispacth => {\n  const instance = axios.create({\n    baseURL: url_default + 'update',\n    timeout: 1000,\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  await instance.post(url_default + 'update', data);\n  const respuesta = await instance.get(url_default + 'users');\n  dispacth({\n    type: 'editar_usuario',\n    payload: respuesta.data.users\n  });\n};\nexport const eliminarUsuario = id => async dispacth => {\n  const instance = axios.create({\n    baseURL: url_default + 'delete',\n    timeout: 1000,\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  await instance.post(url_default + 'delete', {\n    \"id\": id\n  });\n  const respuesta = await instance.get(url_default + 'users');\n  dispacth({\n    type: 'eliminar_usuario',\n    payload: respuesta.data.users\n  });\n};","map":{"version":3,"sources":["C:/wamp64/www/whitelabel_fe/src/actions/usuariosActions.js"],"names":["axios","token","window","localStorage","getItem","url_local","url_remote","url_default","traerTodos","dispacth","instance","create","baseURL","timeout","headers","respuesta","get","type","payload","data","users","crearUsuario","usuarios","post","push","user","editarUsuario","eliminarUsuario","id"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nconst token = window.localStorage.getItem('token');\r\nconst url_local = 'http://localhost:8000/api/';\r\nconst url_remote = 'https://www.test.pressstart.co/dev/whitelabel/api/';\r\nconst url_default = url_local;\r\nexport const traerTodos = () => async (dispacth) => {   \r\n    const instance = axios.create({\r\n        baseURL: url_default + 'users',\r\n        timeout: 1000,\r\n        headers: { 'Authorization': 'Bearer ' + token }\r\n    });\r\n    const respuesta = await instance.get(url_default + 'users');    \r\n    \r\n    dispacth({\r\n        type: 'traer_usuarios',\r\n        payload: respuesta.data.users\r\n    })\r\n}\r\n\r\nexport const crearUsuario = (data, usuarios) => async (dispacth) => {\r\n    \r\n    const instance = axios.create({\r\n        baseURL: url_default + 'create',\r\n        timeout: 1000,\r\n        headers: { 'Authorization': 'Bearer ' + token }\r\n    });\r\n    const respuesta = await instance.post(url_default + 'create', data);   \r\n    usuarios.push(respuesta.data.user);\r\n    dispacth({\r\n        type: 'crear_usuario',\r\n        payload: usuarios\r\n    })\r\n}\r\n\r\nexport const editarUsuario = (data) => async (dispacth) => {\r\n    \r\n    const instance = axios.create({\r\n        baseURL: url_default + 'update',\r\n        timeout: 1000,\r\n        headers: { 'Authorization': 'Bearer ' + token }\r\n    });\r\n\r\n    await instance.post(url_default + 'update', data);\r\n    const respuesta = await instance.get(url_default + 'users');     \r\n\r\n    dispacth({\r\n        type: 'editar_usuario',\r\n        payload: respuesta.data.users\r\n    })\r\n}\r\n\r\nexport const eliminarUsuario = (id) => async (dispacth) => {\r\n    \r\n    const instance = axios.create({\r\n        baseURL: url_default + 'delete',\r\n        timeout: 1000,\r\n        headers: { 'Authorization': 'Bearer ' + token }\r\n    });\r\n\r\n    await instance.post(url_default + 'delete', { \"id\": id });\r\n    \r\n    const respuesta = await instance.get(url_default + 'users');  \r\n    dispacth({\r\n        type: 'eliminar_usuario',\r\n        payload: respuesta.data.users\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}