{"ast":null,"code":"import axios from 'axios';\nimport { URL_DEFAULT } from '../urls/urls';\nconst token = window.localStorage.getItem('token');\nexport const traerPreguntas = () => async dispacth => {\n  const instance = axios.create({\n    baseURL: URL_DEFAULT + 'questions',\n    headers: {\n      'Authorization': 'bearer ' + token\n    }\n  });\n  const respuesta = await instance.get();\n  dispacth({\n    type: 'traer_preguntas',\n    payload: respuesta.data.preguntas\n  });\n};\nexport const crearPregunta = (pregunta, preguntas) => async dispacth => {\n  const instance = axios.create({\n    baseURL: URL_DEFAULT + 'questions',\n    headers: {\n      'Authorization': 'bearer ' + token\n    }\n  });\n  const respuesta = await instance.post(URL_DEFAULT + 'questions', pregunta);\n  preguntas.push(respuesta.data.pregunta);\n  dispacth({\n    type: 'crear_pregunta',\n    payload: respusta.data.preguntas\n  });\n};\nexport const editarPregunta = (data, preguntas) => async dispacth => {\n  const instance = axios.create({\n    baseURL: URL_DEFAULT + 'questions',\n    headers: {\n      'Authorization': 'bearer ' + token\n    }\n  });\n  await instance.put(URL_DEFAULT + 'questions', data);\n  const respuesta = await instance.get(URL_DEFAULT + 'questions');\n  dispacth({\n    type: 'editar_pregunta',\n    payload: respuesta.data.preguntas\n  });\n};\nexport const eliminarPregunta = id => async dispacth => {\n  const instance = axios.create({\n    baseURL: URL_DEFAULT + 'questions/delete',\n    headers: {\n      'Authorization': 'bearer ' + token\n    }\n  });\n  await instance.delete(URL_DEFAULT + 'questions', {\n    params: {\n      \"id\": id\n    }\n  });\n  const respuesta = await instance.get(URL_DEFAULT + 'questions');\n  dispacth({\n    type: 'eliminar_pregunta',\n    payload: respuesta.data.preguntas\n  });\n};","map":{"version":3,"sources":["C:/wamp64/www/whitelabel_fe/src/actions/preguntasActions.js"],"names":["axios","URL_DEFAULT","token","window","localStorage","getItem","traerPreguntas","dispacth","instance","create","baseURL","headers","respuesta","get","type","payload","data","preguntas","crearPregunta","pregunta","post","push","respusta","editarPregunta","put","eliminarPregunta","id","delete","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAET,WAAW,GAAG,WADG;AAE1BU,IAAAA,OAAO,EAAE;AAAE,uBAAiB,YAAYT;AAA/B;AAFiB,GAAb,CAAjB;AAIA,QAAMU,SAAS,GAAG,MAAMJ,QAAQ,CAACK,GAAT,EAAxB;AACAN,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA,OAAO,EAAEH,SAAS,CAACI,IAAV,CAAeC;AAFnB,GAAD,CAAR;AAIH,CAVM;AAYP,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWF,SAAX,KAAyB,MAAOV,QAAP,IAAoB;AAEtE,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAET,WAAW,GAAG,WADG;AAE1BU,IAAAA,OAAO,EAAE;AAAE,uBAAiB,YAAYT;AAA/B;AAFiB,GAAb,CAAjB;AAIA,QAAMU,SAAS,GAAG,MAAMJ,QAAQ,CAACY,IAAT,CAAcnB,WAAW,GAAG,WAA5B,EAAyCkB,QAAzC,CAAxB;AACAF,EAAAA,SAAS,CAACI,IAAV,CAAeT,SAAS,CAACI,IAAV,CAAeG,QAA9B;AACAZ,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,gBADD;AAELC,IAAAA,OAAO,EAAEO,QAAQ,CAACN,IAAT,CAAcC;AAFlB,GAAD,CAAR;AAIH,CAZM;AAcP,OAAO,MAAMM,cAAc,GAAG,CAACP,IAAD,EAAOC,SAAP,KAAqB,MAAOV,QAAP,IAAoB;AACnE,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAET,WAAW,GAAG,WADG;AAE1BU,IAAAA,OAAO,EAAE;AAAE,uBAAiB,YAAYT;AAA/B;AAFiB,GAAb,CAAjB;AAKA,QAAMM,QAAQ,CAACgB,GAAT,CAAavB,WAAW,GAAG,WAA3B,EAAwCe,IAAxC,CAAN;AACA,QAAMJ,SAAS,GAAG,MAAMJ,QAAQ,CAACK,GAAT,CAAaZ,WAAW,GAAG,WAA3B,CAAxB;AACAM,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA,OAAO,EAAEH,SAAS,CAACI,IAAV,CAAeC;AAFnB,GAAD,CAAR;AAIH,CAZM;AAcP,OAAO,MAAMQ,gBAAgB,GAAIC,EAAD,IAAQ,MAAOnB,QAAP,IAAoB;AAExD,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa;AAC1BC,IAAAA,OAAO,EAAET,WAAW,GAAG,kBADG;AAE1BU,IAAAA,OAAO,EAAE;AAAE,uBAAiB,YAAYT;AAA/B;AAFiB,GAAb,CAAjB;AAKA,QAAMM,QAAQ,CAACmB,MAAT,CAAgB1B,WAAW,GAAG,WAA9B,EAA2C;AAAE2B,IAAAA,MAAM,EAAE;AAAC,YAAMF;AAAP;AAAV,GAA3C,CAAN;AAEA,QAAMd,SAAS,GAAG,MAAMJ,QAAQ,CAACK,GAAT,CAAaZ,WAAW,GAAG,WAA3B,CAAxB;AAEAM,EAAAA,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,OAAO,EAAEH,SAAS,CAACI,IAAV,CAAeC;AAFnB,GAAD,CAAR;AAIH,CAfM","sourcesContent":["import axios from 'axios';\r\nimport { URL_DEFAULT } from '../urls/urls';\r\nconst token = window.localStorage.getItem('token');\r\n\r\nexport const traerPreguntas = () => async (dispacth) => {       \r\n    const instance = axios.create({\r\n        baseURL: URL_DEFAULT + 'questions',        \r\n        headers: { 'Authorization': 'bearer ' + token }\r\n    });\r\n    const respuesta = await instance.get();    \r\n    dispacth({\r\n        type: 'traer_preguntas',\r\n        payload: respuesta.data.preguntas\r\n    })\r\n}\r\n\r\nexport const crearPregunta = (pregunta, preguntas) => async (dispacth) => {\r\n    \r\n    const instance = axios.create({\r\n        baseURL: URL_DEFAULT + 'questions',        \r\n        headers: { 'Authorization': 'bearer ' + token }\r\n    });\r\n    const respuesta = await instance.post(URL_DEFAULT + 'questions', pregunta);   \r\n    preguntas.push(respuesta.data.pregunta);\r\n    dispacth({\r\n        type: 'crear_pregunta',\r\n        payload: respusta.data.preguntas\r\n    })\r\n}\r\n\r\nexport const editarPregunta = (data, preguntas) => async (dispacth) => {\r\n    const instance = axios.create({\r\n        baseURL: URL_DEFAULT + 'questions',       \r\n        headers: { 'Authorization': 'bearer ' + token }\r\n    });\r\n\r\n    await instance.put(URL_DEFAULT + 'questions', data);\r\n    const respuesta = await instance.get(URL_DEFAULT + 'questions');     \r\n    dispacth({\r\n        type: 'editar_pregunta',\r\n        payload: respuesta.data.preguntas\r\n    })\r\n}\r\n\r\nexport const eliminarPregunta = (id) => async (dispacth) => {\r\n   \r\n    const instance = axios.create({\r\n        baseURL: URL_DEFAULT + 'questions/delete',       \r\n        headers: { 'Authorization': 'bearer ' + token }\r\n    });\r\n\r\n    await instance.delete(URL_DEFAULT + 'questions', { params: {\"id\": id }} );\r\n    \r\n    const respuesta = await instance.get(URL_DEFAULT + 'questions');  \r\n    \r\n    dispacth({\r\n        type: 'eliminar_pregunta',\r\n        payload: respuesta.data.preguntas\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}